version: '3.9'
services:
    customer_svc:
        image: customer_svc:0.1
        ports:
            - 8080:8080
        environment:
            'PORT': ':8080'
            'DB_URL': 'postgres://moab:supersecure@db/paymentsdb'
            'OTLP_ENDPOINT': tempo:4318
            'APP_NAME': customer_svc
            'ENV': dev
            'LOG_LEVEL': INFO
        networks:
            - app
            - monitoring
        depends_on:
            - db
        restart: always
        labels:
            co.elastic.logs/enabled: true
            co.elastic.logs/json.keys_under_root: true
            co.elastic.logs/json.overwrite_keys: true
            co.elastic.logs/json.add_error_key: true
            co.elastic.logs/json.expand_keys: true

    db:
        networks:
            - app
        image: 'postgres:16.0'
        ports:
            - 5432:5432
        environment:
            POSTGRES_PASSWORD: supersecure
            POSTGRES_USER: moab
            POSTGRES_DB: paymentsdb
        volumes:
            - './init.sql:/docker-entrypoint-initdb.d/init.sql'
            - pgdata:/var/lib/postgresql/data
        command: postgres -c checkpoint_timeout=600 -c max_wal_size=4096
        healthcheck:
            test: pg_isready -U "$$POSTGRES_USER" -d "$$POSTGRES_DB"
            interval: 10s
            timeout: 2s
            retries: 10
        deploy:
            resources:
                limits:
                    cpus: '0.6'
                    memory: '700MB'
        labels:
            co.elastic.logs/enabled: true
            co.elastic.logs/json.keys_under_root: true
            co.elastic.logs/json.overwrite_keys: true
            co.elastic.logs/json.add_error_key: true
            co.elastic.logs/json.expand_keys: true

    init:
        image: &tempoImage grafana/tempo:latest
        user: root
        entrypoint:
            - 'chown'
            - '10001:10001'
            - '/var/tempo'
        volumes:
            - tempodata:/var/tempo

    grafana:
        image: grafana/grafana:10.4.2
        labels:
            co.elastic.logs/enabled: false
        volumes:
            - ../shared/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
        environment:
            - GF_AUTH_ANONYMOUS_ENABLED=true
            - GF_SECURITY_ADMIN_PASSWORD=example
            - GF_SECURITY_ADMIN_USER=admin
            - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
            - GF_AUTH_DISABLE_LOGIN_FORM=true
            - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor traceQLStreaming metricsSummary
        ports:
            - '3000:3000'
        networks:
            - monitoring

    tempo:
        image: *tempoImage
        command: ['-config.file=/etc/tempo.yaml']
        labels:
            co.elastic.logs/enabled: false
        volumes:
            - ../shared/tempo-config.yaml:/etc/tempo.yaml
            - tempodata:/var/tempo
        ports:
            - '14268:14268' # jaeger ingest
            - '3200:3200' # tempo
            - '9095:9095' # tempo grpc
            - '4317:4317' # otlp grpc
            - '4318:4318' # otlp http
            - '9411:9411' # zipkin
        depends_on:
            - init
        networks:
            - monitoring

    # prometheus:
    #     image: prom/prometheus:latest
    #     labels:
    #         co.elastic.logs/enabled: false
    #     command:
    #         - --config.file=/etc/prometheus.yaml
    #         - --web.enable-remote-write-receiver
    #         - --enable-feature=exemplar-storage
    #     volumes:
    #         - ../shared/prometheus.yaml:/etc/prometheus.yaml
    #     ports:
    #         - '9090:9090'
    #     networks:
    #         - monitoring

    filebeat:
        labels:
            co.elastic.logs/enabled: false
        user: root
        image: elastic/filebeat:7.17.21
        command: filebeat -e -strict.perms=false
        volumes:
            - certs:/etc/client
            - ../shared/filebeat.docker.yml:/usr/share/filebeat/filebeat.yml
            - /var/lib/docker/containers:/var/lib/docker/containers:ro
            - /var/run/docker.sock:/var/run/docker.sock:ro
        networks:
            - app
            - monitoring

    es01:
        labels:
            co.elastic.logs/enabled: false
        environment:
            - 'ES_JAVA_OPTS=-Xmx1g -Xms1g'
            - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
            - node.name=es01
            - cluster.name=elasticsearch-cluster
            - network.host=_site_
            - discovery.seed_hosts=es01
            - cluster.initial_master_nodes=es01
            # - bootstrap.memory_lock=true
            - xpack.security.enabled=true
            - xpack.security.authc.token.enabled=true
            - xpack.security.audit.enabled=true
            - xpack.security.authc.realms.file.file1.order=0
            - xpack.security.authc.realms.native.native1.order=1
            - xpack.security.transport.ssl.enabled=true
            - xpack.security.transport.ssl.keystore.password=$ELASTICSEARCH01_CERT_PASSWORD
            - xpack.security.transport.ssl.truststore.password=$ELASTICSEARCH01_CERT_PASSWORD
            - xpack.security.transport.ssl.keystore.path=$CERTS_DIR/elasticsearch01.p12
            - xpack.security.transport.ssl.verification_mode=certificate
            - xpack.security.http.ssl.enabled=true
            - xpack.security.http.ssl.keystore.password=$ELASTICSEARCH01_CERT_PASSWORD
            - xpack.security.http.ssl.truststore.password=$ELASTICSEARCH01_CERT_PASSWORD
            - xpack.security.http.ssl.keystore.path=$CERTS_DIR/elasticsearch01.p12
            - xpack.security.http.ssl.verification_mode=certificate
            - xpack.license.self_generated.type=trial
            - xpack.security.enrollment.enabled=true
        image: elasticsearch:8.13.0
        volumes: ['certs:$CERTS_DIR']
        healthcheck:
            test: curl --cacert $CERTS_DIR/ca/ca.crt -s https://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
            interval: 30s
            timeout: 10s
            retries: 5
        ports:
            - 9200:9200
        networks:
            - app
            - monitoring
        depends_on:
            - create_certs
        restart: always

    kibana:
        labels:
            co.elastic.logs/enabled: false
        environment:
            - SERVER_NAME=kibana
            # - ELASTICSEARCH_HOSTS=["https://es01:9200"]
            - server.host=_site_
            - xpack.security.enabled=true
            - elasticsearch.username=elastics
            - elasticsearch.password=$ELASTIC_PASSWORD
            - elasticsearch.ssl.certificateAuthorities=/usr/share/kibana/config/certs/ca/ca.crt
            - elasticsearch.ssl.verificationMode=certificate
            - server.ssl.enabled=true
            - server.ssl.key=/usr/share/kibana/config/certs/kibana.key
            - server.ssl.certificate=/usr/share/kibana/config/certs/kibana.crt
            - server.ssl.password=${ELASTICSEARCH01_CERT_PASSWORD}
            - xpack.monitoring.elasticsearch.ssl.verificationMode=certificate
        image: kibana:8.13.0
        ports:
            - 5601:5601
        volumes:
            - certs:/usr/share/kibana/config/certs/:ro
        networks:
            - app
            - monitoring

    create_certs:
        container_name: create_certs
        image: elasticsearch:8.13.0
        environment:
            CA_PASSWORD: $CA_PASSWORD
            ELASTICSEARCH01_CERT_PASSWORD: $ELASTICSEARCH01_CERT_PASSWORD
        command: >
            bash -c '
                if [[ ! -f /certs/elasticsearch01.p12 ]]; then
                echo "Excluding old ca";
                rm -rf /certs/ca.zip;
                rm -rf /certs/ca;
                rm -rf /certs/es01;
                echo "Generating CA" &&
                bin/elasticsearch-certutil ca --silent --pass ${ELASTICSEARCH01_CERT_PASSWORD} --pem --out /certs/ca.zip &&
                unzip /certs/ca.zip -d /certs &&

                echo "Generating certificate for Elasticsearch01" &&
                bin/elasticsearch-certutil cert --silent --ca-cert /certs/ca/ca.crt --ca-key /certs/ca/ca.key --ca-pass ${ELASTICSEARCH01_CERT_PASSWORD} --pass ${ELASTICSEARCH01_CERT_PASSWORD} --dns es01 --out /certs/elasticsearch01.p12 &&
                

                echo "Generating certificate for Kibana" &&
                bin/elasticsearch-certutil cert --silent --ca-cert /certs/ca/ca.crt --ca-key /certs/ca/ca.key --ca-pass ${ELASTICSEARCH01_CERT_PASSWORD} --pass ${ELASTICSEARCH01_CERT_PASSWORD} --pem --dns kibana --out /certs/kibana.zip &&
                unzip /certs/kibana.zip -d /certs &&
                mv /certs/instance/instance.crt /certs/kibana.crt &&
                mv /certs/instance/instance.key /certs/kibana.key &&
                rm -rf /certs/instance;

                echo "Generating certificate for filebeat" &&
                bin/elasticsearch-certutil cert --silent --ca-cert /certs/ca/ca.crt --ca-key /certs/ca/ca.key --ca-pass ${ELASTICSEARCH01_CERT_PASSWORD} --pass ${ELASTICSEARCH01_CERT_PASSWORD} --pem --dns filebeat --out /certs/filebeat.zip &&
                unzip /certs/filebeat.zip -d /certs &&
                mv /certs/instance/instance.crt /certs/filebeat.crt &&
                mv /certs/instance/instance.key /certs/filebeat.key &&
                rm -rf /certs/instance;
                fi;
                chown -R 1000:0 /certs
            '
        user: '0'
        working_dir: /usr/share/elasticsearch
        volumes:
            ['certs:/certs', '.:/usr/share/elasticsearch/config/certificates']

    apigateway:
        image: devopsfaith/krakend:2.6.2-watch
        volumes:
            - ../shared/krakend:/etc/krakend
            - /home/moab/go/pkg/mod/github.com/devopsfaith:/opt/krakend/plugins
        command: >
            run -c krakend.json
        ports:
            - 9090:8080
        networks:
            - app
            - monitoring

    rabbitmq:
        image: rabbitmq:3
        environment:
            - RABBITMQ_DEFAULT_PASS=test
            - RABBITMQ_DEFAULT_USER=test
        networks:
            - app
            - monitoring

    rabbitmq_man:
        image: rabbitmq:3-management
        networks:
            - app
            - monitoring
        environment:
            - RABBITMQ_DEFAULT_PASS=test
            - RABBITMQ_DEFAULT_USER=test
        ports:
            - 15672:15672

networks:
    app:
    monitoring:

volumes:
    pgdata:
    tempodata:
    certs:
